module chacha_test where
import chacha_block
import chacha_property
import chacha_rfc


tkey1 =  0x0000000000000000000000000000000000000000000000000000000000000000
ti1  =  0x00000000
tn1 =   0x000000000000000000000000
tmsg1 =  [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00]


tkey2 =  0x0000000000000000000000000000000000000000000000000000000000000001
ti2  =  0x00000000  
tn2 =   0x000000000000000000000002
tmsg2 = [
    0x41, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
    0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45,
    0x54, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,
    0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
    0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
    0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46,
    0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x44, 0x72,
    0x61, 0x66, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69,
    0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
    0x74, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49,
    0x45, 0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
    0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
    0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x49, 0x45, 0x54, 0x46, 0x20,
    0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
    0x22, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
    0x64, 0x65, 0x20, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45,
    0x54, 0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2c,
    0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20,
    0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x63,
    0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e,
    0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x6c,
    0x61, 0x63, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61,
    0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
    0x20, 0x74, 0x6f
]



//反例
tkey = 0x0e81788a8f4136ed1168885b93fe929d008f0ada4343568aeffcc4850fb598cd
ti =  0x1e1867d9
tn =   0x6baa3f31b37bf08fbf32d605
// tkey2 = [0x0e, 0x81, 0x78, 0x8a, 0x8f, 0x41, 0x36, 0xed,
//  0x11, 0x68, 0x88, 0x5b, 0x93, 0xfe, 0x92, 0x9d,
//  0x00, 0x8f, 0x0a, 0xda, 0x43, 0x43, 0x56, 0x8a,
//  0xef, 0xfc, 0xc4, 0x85, 0x0f, 0xb5, 0x98, 0xcd]
// ti2 = [0x1e, 0x18, 0x67, 0xd9]
// tn2 = [0x6b, 0xaa, 0x3f, 0x31, 0xb3, 0x7b, 0xf0, 0x8f, 0xbf, 0x32, 0xd6, 0x05]
tmsg = [0x47, 0x38, 0x9d, 0x42, 0x39, 0x9a, 0xbd, 0x08, 0x24, 0x96, 0x6f,
   0x53, 0xd5, 0xcc, 0x5b, 0xdd, 0xe6, 0xf9, 0x57, 0x05, 0xe5, 0x48,
   0xa1, 0xb7, 0x9e, 0xb3, 0xdc, 0x1c, 0xeb, 0x68, 0x45, 0x85, 0xd7,
   0x03, 0x44, 0x6c, 0x59, 0x8b, 0xff, 0x0c, 0x00, 0x9b, 0xde, 0x6b,
   0xd5, 0x97, 0xa8, 0x14, 0x84, 0xe2, 0x6f, 0x14, 0x07, 0xdf, 0x4b,
   0x7c, 0x84, 0x47, 0x2e, 0x50, 0x83, 0x8a, 0x5c, 0x89, 0xef, 0x2a,
   0x06, 0x50, 0xdb, 0xbd, 0xee, 0x3e, 0xd9, 0xb0, 0x7b, 0xc1, 0xc8,
   0x80, 0x6f, 0x54, 0x8f, 0xbd, 0x23, 0x1b, 0xe0, 0xf1, 0x8c, 0x48,
   0xe8, 0x87, 0x84, 0x7f, 0x6c, 0x57, 0x30, 0xa7, 0x7e, 0xf1, 0x5c,
   0xfa, 0xfb, 0xff, 0x60, 0x74, 0xbe, 0xc1, 0xf5, 0x52, 0xa1, 0x88,
   0xba, 0x95, 0x23, 0x39, 0xac, 0xef, 0x41, 0xbd, 0xdd, 0x1d, 0x41,
   0x4a, 0xb9, 0xe6, 0xe7, 0xd7, 0x46, 0xb0]


// tkey =  0x2e8ce9e6647f1af85f143097c2536ce7f3fd012a93a2d4d797e9dff7d8c888fa
// ti  =  0xf9d0df9c
// tn =   0x57ca44cc00f51909496e65fc
// tmsg =   [0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]

tout = [0x22, 0xa7, 0xd5, 0xfc, 0x13, 0x55, 0x85, 0x74, 0xd9, 0x32, 0xfc,
 0x64, 0xd2, 0x5a, 0x94, 0x9b, 0x78, 0xa4, 0x4d, 0xfd, 0xfa, 0x23,
 0xcb, 0x5c, 0x4a, 0x40, 0xd8, 0x43, 0xf1, 0x55, 0xb5, 0xb7, 0xbf,
 0xd5, 0xa5, 0x12, 0xdb, 0x30, 0x31, 0x9d, 0x19, 0xd5, 0x14, 0x03,
 0x1f, 0x24, 0x15, 0xa9, 0xaa, 0xc8, 0x66, 0xac, 0xe6, 0x2d, 0x28,
 0xff, 0xe9, 0x32, 0x72, 0x9f, 0x62, 0xc6, 0xc8, 0x87, 0xa5, 0x91,
 0x17, 0x12, 0x4e, 0xf5, 0x83, 0x89, 0x1b, 0x24, 0x48, 0xca, 0x48,
 0x22, 0x83, 0x36, 0x68, 0x4e, 0x20, 0x68, 0x88, 0xb7, 0x2c, 0x7a,
 0x0c, 0xee, 0xa8, 0x8f, 0xe1, 0x1f, 0x10, 0x77, 0xd6, 0x82, 0x8a,
 0xf0, 0xd8, 0x1e, 0x7a, 0x4d, 0x95, 0xe6, 0x07, 0xc1, 0x72, 0x3b,
 0x73, 0x90, 0x80, 0x33, 0x2b, 0xdf, 0x2c, 0x94, 0x7f, 0x84, 0xb4,
 0x9d, 0x73, 0x21, 0xf5, 0x1e, 0x15, 0x81]

// Test cases for CRYPT_CHACHA20_Update with different lastLen values
// Test case 1: 129 bytes input (lastLen=1, 2 blocks) - returns actual output
test_CRYPT_CHACHA20_Update_131 : [131][8]
test_CRYPT_CHACHA20_Update_131 = result
    where
        // Test context with known key and nonce (matches C test parameters)
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,  // Constants
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,  // Key part 1
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,  // Key part 2
                     0x00000001,                                        // Counter
                     0x09000000, 0x4a000000, 0x00000000],              // Nonce
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }
        // Test input: 129 bytes of sequential data (matches C test)
        test_input1 = [i | i <- [0..127]]
        test_input2 = [0x11, 0x12, 0x13]
        test_input = test_input1 # test_input2

        // Call function with type parameters: total_len=129, k=1, full_blocks=2, remaining=0
        // 129 - 1 = 128; 128/64 = 2 blocks; 128%64 = 0 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{131, 0, 2, 3} test_ctx test_input 131
        
// Test case 2: 192 bytes input (lastLen=0, 3 blocks) - returns actual output  
test_CRYPT_CHACHA20_Update_192 : [192][8]
test_CRYPT_CHACHA20_Update_192 = result
    where
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,
                     0x09000000, 0x4a000000, 0x00000000],
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }

        test_input = [i | i <- [0..191]]
        // Call function with type parameters: total_len=192, k=0, full_blocks=3, remaining=0
        // 192 - 0 = 192; 192/64 = 3 blocks; 192%64 = 0 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{192, 0, 3, 0} test_ctx test_input 192

// Test case 3: 64 bytes input (lastLen=0, 1 block) - returns actual output
test_CRYPT_CHACHA20_Update_64 : [64][8]
test_CRYPT_CHACHA20_Update_64 = result
    where
        // RFC 7539 test vector setup (matches C test parameters)
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,  // "expand 32-byte k"
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,  // Key: 00010203...
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,                                        // Counter = 1
                     0x09000000, 0x4a000000, 0x00000000],              // Nonce
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }

        // Test with 64 bytes of zeros (matches C test)
        test_input = [0 | _ <- [0..63]]
        // Call function with type parameters: total_len=64, k=0, full_blocks=1, remaining=0
        // 64 - 0 = 64; 64/64 = 1 block; 64%64 = 0 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{64, 0, 1, 0} test_ctx test_input 64

// Test case 4: 100 bytes input with remaining bytes (lastLen=0, 1 block + 36 bytes remaining)
test_CRYPT_CHACHA20_Update_100 : [100][8]
test_CRYPT_CHACHA20_Update_100 = result
    where
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,
                     0x09000000, 0x4a000000, 0x00000000],
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }

        test_input = [i | i <- [0..99]]
        // Call function with type parameters: total_len=100, k=0, full_blocks=1, remaining=36
        // 100 - 0 = 100; 100/64 = 1 block; 100%64 = 36 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{100, 0, 1, 36} test_ctx test_input 100

// Test case 5: 133 bytes input with lastLen and remaining (lastLen=1, 2 blocks + 4 bytes remaining)
test_CRYPT_CHACHA20_Update_133 : [133][8]
test_CRYPT_CHACHA20_Update_133 = result
    where
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,
                     0x09000000, 0x4a000000, 0x00000000],
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 1,
            set = 0x03
        }

        test_input = [i | i <- [0..132]]
        // Call function with type parameters: total_len=133, k=1, full_blocks=2, remaining=4
        // 133 - 1 = 132; 132/64 = 2 blocks; 132%64 = 4 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{133, 1, 2, 4} test_ctx test_input 133
