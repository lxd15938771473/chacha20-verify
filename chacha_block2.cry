module chacha20block where
import chacha_openhitls

// Robust version of CHACHA20_Update that handles n=0
CHACHA20_Update : {n, t}(fin n, t == n / 64, n % 64 == 0) => CRYPT_CHACHA20_Ctx
    -> [n][8] -> [32] -> (CRYPT_CHACHA20_Ctx, [n][8])
CHACHA20_Update ctx inp len = (final_ctx, out)
    where
        // 1. Generate the sequence of contexts by repeatedly applying CHACHA20_Block
        ctx_sequence = [ctx] # [CHACHA20_Block c | c <- ctx_sequence]
        // 2. Take the final context after 't' blocks
        final_ctx = ctx_sequence @ `t
        // 3. Get the keystreams from the generated blocks (t blocks after the initial context)
        keystreams = [c.last.u | c <- take`{t} (drop`{1} ctx_sequence)]
        ccs = (groupBy`{32} (join (join keystreams)))
        ccss = [ (reverse (groupBy`{8} cc)) | cc <- ccs]
        ccss2 = join ccss
        // 4. XOR the input with the concatenated keystreams
        out = [ in ^ u | in <- inp | u <- ccss2 ]

// CRYPT_CHACHA20_Update - Complete version with 3-stage processing
CRYPT_CHACHA20_Update : {total_len, k, full_blocks, remaining}
    (fin total_len, fin k, fin full_blocks, fin remaining,
     0 <= k, k < 64,
     0 <= remaining, remaining < 64,
     total_len >= k,
     full_blocks == (total_len - k) / 64,
     remaining == (total_len - k) % 64,
     full_blocks * 64 + remaining + k == total_len) =>
    CRYPT_CHACHA20_Ctx -> [total_len][8] -> [32] -> (CRYPT_CHACHA20_Ctx, [total_len][8])
CRYPT_CHACHA20_Update ctx inp len = (ctx_final, out_final)
    where
        // Stage 1: Handle existing partial block (k bytes from last operation)
        last_keystream = drop`{64 - k} ctx.last.u
        out1 = [ inp_byte ^ key_byte | inp_byte <- take`{k} inp | key_byte <- take`{k} last_keystream ]

        // Stage 2: Process complete 64-byte blocks (unconditional call)
        after_k_inp = drop`{k} inp
        full_blocks_inp = take`{full_blocks * 64} after_k_inp
        (ctx_after_blocks, out2) = CHACHA20_Update ctx full_blocks_inp len

        // Stage 3: Process remaining bytes (unconditional calculation)
        remaining_inp = drop`{full_blocks * 64} after_k_inp
        ctx_for_final_block = CHACHA20_Block ctx_after_blocks
        keystream_for_remaining = ctx_for_final_block.last.u
        ccs = (groupBy`{32} (join keystream_for_remaining))
        ccss = [ (reverse (groupBy`{8} cc)) | cc <- ccs]
        ccss2 = join ccss
        out3 = [ inp_byte ^ key_byte | inp_byte <- remaining_inp
                                     | key_byte <- take`{remaining} ccss2 ]
        // Final context selection using a value-level 'if'
        ctx_final = if (`remaining) == 0
                    then ctx_after_blocks
                    else ctx_for_final_block // { lastLen = 64 - `remaining }

        // Combine all outputs
        out_final = out1 # out2 # out3


//CRYPT_CHACHA20_Ctrl(CRYPT_CHACHA20_Ctx *ctx, int32_t opt, void *val, uint32_t len)
CRYPT_CHACHA20_Ctrl_Nonce : CRYPT_CHACHA20_Ctx -> [32] -> [12][8] -> CRYPT_CHACHA20_Ctx
CRYPT_CHACHA20_Ctrl_Nonce ctx opt val = CRYPT_CHACHA20_SetNonce ctx val

CRYPT_CHACHA20_Ctrl_Count : CRYPT_CHACHA20_Ctx -> [32] -> [4][8] -> CRYPT_CHACHA20_Ctx
CRYPT_CHACHA20_Ctrl_Count ctx opt val = CRYPT_CHACHA20_SetCount ctx val


// Test cases for CRYPT_CHACHA20_Update with different lastLen values
// Test case 1: 129 bytes input (lastLen=1, 2 blocks) - returns actual output
test_CRYPT_CHACHA20_Update_129 : [131][8]
test_CRYPT_CHACHA20_Update_129 = result
    where
        // Test context with known key and nonce (matches C test parameters)
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,  // Constants
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,  // Key part 1
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,  // Key part 2
                     0x00000001,                                        // Counter
                     0x09000000, 0x4a000000, 0x00000000],              // Nonce
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 1,
            set = 0x03
        }
        // Test input: 129 bytes of sequential data (matches C test)
        test_input1 = [i | i <- [0..127]]
        test_input2 = [0x11, 0x12, 0x13]
        test_input = test_input1 # test_input2

        // Call function with type parameters: total_len=129, k=1, full_blocks=2, remaining=0
        // 129 - 1 = 128; 128/64 = 2 blocks; 128%64 = 0 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{131, 1, 2, 2} test_ctx test_input 131

// Test case 2: 192 bytes input (lastLen=0, 3 blocks) - returns actual output  
test_CRYPT_CHACHA20_Update_192 : [192][8]
test_CRYPT_CHACHA20_Update_192 = result
    where
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,
                     0x09000000, 0x4a000000, 0x00000000],
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }

        test_input = [i | i <- [0..191]]
        // Call function with type parameters: total_len=192, k=0, full_blocks=3, remaining=0
        // 192 - 0 = 192; 192/64 = 3 blocks; 192%64 = 0 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{192, 0, 3, 0} test_ctx test_input 192

// Test case 3: 64 bytes input (lastLen=0, 1 block) - returns actual output
test_CRYPT_CHACHA20_Update_64 : [64][8]
test_CRYPT_CHACHA20_Update_64 = result
    where
        // RFC 7539 test vector setup (matches C test parameters)
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,  // "expand 32-byte k"
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,  // Key: 00010203...
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,                                        // Counter = 1
                     0x09000000, 0x4a000000, 0x00000000],              // Nonce
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }

        // Test with 64 bytes of zeros (matches C test)
        test_input = [0 | _ <- [0..63]]
        // Call function with type parameters: total_len=64, k=0, full_blocks=1, remaining=0
        // 64 - 0 = 64; 64/64 = 1 block; 64%64 = 0 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{64, 0, 1, 0} test_ctx test_input 64

// Test case 4: 100 bytes input with remaining bytes (lastLen=0, 1 block + 36 bytes remaining)
test_CRYPT_CHACHA20_Update_100 : [100][8]
test_CRYPT_CHACHA20_Update_100 = result
    where
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,
                     0x09000000, 0x4a000000, 0x00000000],
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 0,
            set = 0x03
        }

        test_input = [i | i <- [0..99]]
        // Call function with type parameters: total_len=100, k=0, full_blocks=1, remaining=36
        // 100 - 0 = 100; 100/64 = 1 block; 100%64 = 36 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{100, 0, 1, 36} test_ctx test_input 100

// Test case 5: 133 bytes input with lastLen and remaining (lastLen=1, 2 blocks + 4 bytes remaining)
test_CRYPT_CHACHA20_Update_133 : [133][8]
test_CRYPT_CHACHA20_Update_133 = result
    where
        test_ctx = {
            state = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
                     0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
                     0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
                     0x00000001,
                     0x09000000, 0x4a000000, 0x00000000],
            last = {
                c = [0 | _ <- [0..15]],
                u = [0 | _ <- [0..63]]
            },
            lastLen = 1,
            set = 0x03
        }

        test_input = [i | i <- [0..132]]
        // Call function with type parameters: total_len=133, k=1, full_blocks=2, remaining=4
        // 133 - 1 = 132; 132/64 = 2 blocks; 132%64 = 4 remaining
        (final_ctx, result) = CRYPT_CHACHA20_Update`{133, 1, 2, 4} test_ctx test_input 133

// Verification helper: check if first 16 bytes match RFC 7539 expected keystream
verify_rfc7539_keystream : Bit
verify_rfc7539_keystream = take`{16} test_CRYPT_CHACHA20_Update_64 == expected_start
    where expected_start = [0x10, 0xf1, 0xe7, 0xe4, 0xd1, 0x3b, 0x59, 0x15,
                           0x50, 0x0f, 0xdd, 0x1f, 0xa3, 0x20, 0x71, 0xc4]



